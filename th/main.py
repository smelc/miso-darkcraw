#!/usr/bin/env python3
"""
Run:

* ./th/main.py --install
  to update app/shared/JsonData.hs with the content of th/data.json.
* ./th/main.py --check
  to check that app/shared/JsonData.hs is up-to-date i.e.
  that --install would do no change.

This file has been coded using python3.8.5. Use this version or a
later one.
"""

import os
import re
import subprocess
import sys
from typing import Optional, Tuple


def _check_cwd() -> int:
    """returns a return code"""
    cwd_string = os.getcwd()
    cwd = cwd_string.split("/")
    if not cwd:
        print("cwd not found", file=sys.stderr)
        return 1
    if os.path.exists(".git/config"):
        # All good
        pass
    elif cwd[-1] == "th":
        # Running from th/, change to git's root
        os.chdir("/".join(cwd[:-1]))
        print(f"Changed cwd from {cwd_string} to {os.getcwd()}")
    else:
        print(
            f"Unhandled cwd: {cwd}. Please execute me from the git root",
            file=sys.stderr,
        )
        return 1
    return 0


def _show_help():
    msg = """./th/main.py [--check] [--install] [--help]
--check checks that app/shared/JsonData.hs has the expected content
--install overwrites app/shared/JsonData.hs with content derived from th/data.json
--help displays this help

--install is the default
"""
    print(msg)


def _get_splice() -> Optional[str]:
    """returns the content if found"""
    for f in ["th/Main.hs", "th/data.json"]:
        if not os.path.isfile(f):
            print(f"{f} not found", file=sys.stderr)
            return None

    touch_cmd = ["touch", "th/Main.hs"]
    res = subprocess.run(touch_cmd, check=False)
    if res.returncode != 0:
        print(" ".join(touch_cmd) + " failed", file=sys.stderr)
        return None

    # Required first time ever, so that file-embed (dependency of Main.hs) is installed
    subprocess.run(["stack", "build"], cwd="th")

    # if subprocess.run(["which", "ghc"], check=False, cwd="th").returncode == 0:
    #     ghc_cmd = ["ghc"]  # Use available ghc
    # else:
    ghc_cmd = ["stack", "exec", "ghc", "--"]  # Try stack

    ghc_cmd += ["Main.hs", "-ddump-splices"]
    ghc_cmd_string = " ".join(ghc_cmd)
    res = subprocess.run(ghc_cmd, check=False, cwd="th", capture_output=True, text=True)
    if res.returncode != 0:
        if res.stderr:
            print(res.stderr, file=sys.stderr, end="")
        print(f"{ghc_cmd_string} failed.", file=sys.stderr)
        return None
    raw_output = res.stdout

    if m := re.search(r'("\{\\n\\.*")#\)', raw_output, flags=re.DOTALL | re.MULTILINE):
        return m.group(1)

    print(f"Splice not found in output. Run {ghc_cmd_string} to see the output.")
    return None


def _use_splice(check_or_install: bool, splice: str) -> int:
    """returns a return code
    If True, check_or_install means check
    If False, check_or_install means install
    """
    whole_module = (
        """{- ORMOLU_DISABLE -}

{-# LANGUAGE OverloadedStrings #-}

-- This module is generated by `./th/main.py --install` (whenever
-- th/data.json changes). Hence do not edit this file!
module JsonData where

import Data.Text

jsonData :: Text
jsonData = %s
"""
        % splice
    )  # Final newline required, otherwise ormolu inserts it
    # (despite ORMOLU_DISABLE)

    filepath = "app/shared/JsonData.hs"

    if check_or_install:
        with open(filepath, "r") as handle:
            content = handle.read()
            if content != whole_module:
                print(
                    f"{filepath} content isn't up-to-date\nRun ./th/main.py --install to fix it.",
                    file=sys.stderr,
                )
                return 1
    else:
        with open(filepath, "w") as handle:
            handle.write(whole_module)

    return 0


def main() -> int:
    """The main"""
    if (return_code := _check_cwd()) != 0:
        return return_code

    check, install = False, False

    for arg in sys.argv[1:]:
        if arg == "--check":
            check = True
        elif arg == "--install":
            install = True
        elif arg in ["-h", "--h", "-help", "--help"]:
            _show_help()
            return 0

    if not (check or install):
        install = True

    if check and install:
        print(
            "--check and --install are exclusive. Remove one of them.", file=sys.stderr
        )
        return 1

    content = _get_splice()
    if content is None:
        return 1

    _use_splice(check, content)

    return 0


if __name__ == "__main__":
    sys.exit(main())
